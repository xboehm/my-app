name: Deployment

on:
  pull_request:
    branches: 
      - development
    types: [closed]

# on:
#   push:
#     branches: 
#       - development

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_HUB_REPO: react-app
  LOCAL_DOCKER_UNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  create-release:
    name: Create a new GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Changelog
        uses: scottbrenner/generate-changelog-action@master
        id: Changelog
        env:
          REPO: ${{ github.repository }}

      - name: Get version from package.json
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: Use version variable
        run: echo "${{ env.VERSION }}"
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: v${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: ${{ steps.Changelog.outputs.changelog }}
          draft: false
          prerelease: false

  build-and-push-to-registry:
    if: ${{ github.event.pull_request.merged }}
    name: Build Docker image and push to registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: "Set environmental variables"
        run: echo "TAG=$LOCAL_DOCKER_UNAME/$DOCKER_HUB_REPO:v" >> $GITHUB_ENV
      
      - name: Checkout repository
        uses: actions/checkout@v3 

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            # ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_HUB_REPO }}
          flavor: |
            latest=false
          tags: |
            type=semver,pattern={{version}},priority=900
            #type=edge,branch=$repo.default_branch,priority=800,suffix=-ed
            type=sha,format=short,priority=750,enable=${{ !startsWith(github.ref, 'refs/tags/') }}
            #type=ref,event=branch,priority=700,suffix=-br
            #type=ref,event=pr,priority=600,suffix=-pr
           
      # - name: Print metadata tags
      #   run: echo "${{ steps.meta.outputs.tags }}"

      # - name: Print metadata labels
      #   run: echo "${{ steps.meta.outputs.labels }}"

      - name: Get version from package.json
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      # - name: Use version variable
      #   run: echo "${{ env.VERSION }}"

      - name: Print own tagname
        run: echo "${{ env.TAG }}${{ env.VERSION }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          #tags: ${{ steps.meta.outputs.tags }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            #${{ env.TAG }}${{ env.VERSION }}
            
          labels: ${{ steps.meta.outputs.labels }}

  label:
    runs-on: ubuntu-latest
    needs: [build-and-push-to-registry, create-release]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['release']
            })

  comment:
    runs-on: ubuntu-latest
    needs: [build-and-push-to-registry, create-release, label]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Get the upload URL for a release
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Comment on the result
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
              Great job **@${context.payload.sender.login}**! Your PR is merged into the Development branch. The application is containerized
              and available in GitHub Packages. A new release was created, see: ${ steps.get_release.outputs.upload_url }.
              `
            })